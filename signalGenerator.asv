function signal = signalGenerator(samplingFrequency, startTime, endTime, bPoints, breakpointsNumber)
%signalGenerator Summary of this function goes here
%   The function asks user for signal type for each portion and then it
%   generates the portions forming the signal
clc;
fprintf('1. DC signal\n2. Ramp signal\n3. General order polynomial\n4. Exponential signal\n');
fprintf('5. Sinusoidal signal\n6. Sinc function\n7. Triangle pulse\n');
formats = struct('type', {}, 'style', {}, 'items', {}, 'format', {}, 'limits', {}, 'size', {});
formats(1,1).type   = 'list';
formats(1,1).style = 'popupmenu';
formats(1,1).items  = {'DC signal','Ramp signal', 'General order polynomial', 'Exponential signal',...
    'Sinusoidal signal', 'Sinc function', 'Triangle pulse'}; 
defaultanswers = {4, 10};% 4 is an index from the items in the list, 10 is an integer value
[answer, canceled] = inputsdlg(prompt, name, formats, defaultanswers);
if (breakpointsNumber > 0)
    breakPoints = [startTime bPoints endTime];
else
    breakPoints = [startTime endTime];
end

signal = [];
for i = 1:breakpointsNumber+1
    samplesTime = linspace(breakPoints(i),breakPoints(i+1), (breakPoints(i+1) - breakPoints(i))*samplingFrequency);
    value = inputdlg("Signal between " + breakPoints(i) + " and " + breakPoints(i+1) + ": ");
    signalType = str2num(value{1});
    portion = smallSignal(signalType, samplesTime);
    signal = [signal, portion];
end

